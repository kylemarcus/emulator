function errorcode=merge_probability_of_hazard_maps(varargin)
%errorcode=aggregate_probability_of_hazard_map(options,...,options,permanenthazmapfilename,temporaryhazmapfilename)
%this was written with the intent of it being compiled and run on the
%backend of a cluster, so in the tradditional linux/unix style the options come
%before the regular arguments, the only option it currently recognizes is
%"-f" to force the function to aggregate duplicate sets of macro inputs 
%that are already represented in the .phm file.
%the errorcode is 0 unless you try to aggregate in duplicates without
%forcing, i.e. using the "-f" option, it to be re-aggregated.  In that case
%the errorcode is 3, which indicates that the workspace has been saved to
%the file DEBUG_AGGREGATE_PROBABILITY_OF_HAZARD_MAP3.m, this is to
%facilitate debugging.  Other than that all detected errors will cause the
%code to crash (usually saving a debug file, named 
%DEBUG_AGGREGATE_PROBABILITY_OF_HAZARD_MAP#.mat (# is a, possibly multiple 
%digit, integer), first.  However but the first 2 errors which detect 
%"wrong filenames" do not result in a saved DEBUG*.mat file.

    errorcode=0;
    ifforce=0;
    permanenthazmapfilename=varargin{nargin-1};
    temporaryhazmapfilename=varargin{nargin};
    
    if(nargin>2)
        opt=varargin(1:nargin-2);
        ifforce=ismember('-f',opt);
    end
        
    iftoc=1;
    if(iftoc)
        tic;
    end
    yada=sscanf(temporaryhazmapfilename,'phm_from_eval_%d.%d.%d',3);
    if(numel(yada)~=3)
        disp(sprintf('ERROR: You entered "%s" as the temporary phm file to aggregate. The format of the filename needs to be "phm_for_eval_%%d.%%08d.%%d"',temporaryhazmapfilename));
        bob; %cause the code to crash
    end
    MacroSimplexNumber=yada(1);
    RandomKey=yada(2);
    MomentToAggregate=yada(3);
    if(isempty(MomentToAggregate)||(MomentToAggregate~=1))
        disp(sprintf('ERROR: You entered "%s" as the temporary phm file to aggregate.  Currently you can only aggregate phm''s based on the first moment (the mean), but you said to aggregate a phm based on moment %d',temporaryhazmapfilename,MomentToAggregate));
        bob; %cause the code to crash
    end
    Nmoments=1;    
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %read input file #1
    newpermanenthazmapfilename=[permanenthazmapfilename '.tmp'];

    fid=fopen(permanenthazmapfilename,'r');
    fidnewphm=fopen(newpermanenthazmapfilename,'w');
    
    yada=fgets(fid);
    Nskip=sscanf(yada,'additional file format lines=%g',1);
    fprintf(fidnewphm,'%s',yada); %copy the line to the new file
    
    for i=1:Nskip
        fprintf(fidnewphm,'%s',fgets(fid)); %copy the line to the new file
    end
%     fprintf(fid,'%%This file contains data for a Colima probability of hazard map generated by resampling a piecewise linear ensemble emulator constructed from titan simulations\n');
%     fprintf(fid,'%%crith [m]: the critical flow depth in meters, a .phm file contains the data needed to plot a map of P(h(east,north)>crith): [1] double\n');
%     fprintf(fid,'%%Ndiminmacro=4: number of uncertain dimensions (see what they are below) for each resample input: [1] integer\n');
%     fprintf(fid,'%%W: total so far weight of all resamples (macro emulator inputs) used to make this file:  [1] double\n');
%     fprintf(fid,'%%Nxmap: the number of (east,north) points on the map directly represented by this file: [1] integer\n');
%     fprintf(fid,'%%[Nxmap] lines containing {{x=(east,north):[2] doubles},{{WI WI^2}: these are the sum of all w*indicator_function and w*indicator_function^2, you compute the probability of exceeding the critical height as P(h(east,north)>crith)=WI/W: [2] doubles}}\n');
%     fprintf(fid,'%%Nresamp: number of resample inputs used so far to produce this .phm file: [1] integer\n');
%     fprintf(fid,'%%[Nresamp] lines containing the {{resample macro-inputs: (log10(volume [m^3]),Direction [deg CC from east],BedFrictAng [deg],IntFrictAng [deg]): [Ndiminmacro] doubles},{w: weight of this resample macro-input: [1] double}}\n');
       
    crith=sscanf(fgets(fid),'%g',1); 
    Ndiminmacro=sscanf(fgets(fid),'%g',1);
    W=sscanf(fgets(fid),'%g',1); 
    Nxmap=sscanf(fgets(fid),'%g',1);

    XMAPWIWI2=fscanf(fid,'%g %g %g\n',[4 Nxmap])';
        
    Nresamp=sscanf(fgets(fid),'%g',1);
    if(Nresamp>0)
        XMACROw=fscanf(fid,sprintf('%%g%s\n',repmat(' %g',1,Ndiminmacro)),[Ndiminmacro+1 Nresamp])';
    else
        XMACROw=[];
    end
    fclose(fid);   
    
    if(iftoc)
        disp(sprintf('Done reading "%s" at time t=%g [sec]',permanenthazmapfilename,toc));
    end
              
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %read input file #2
    fid=fopen(temporaryhazmapfilename,'r');
    
    yada=fgets(fid);
    Nskip=sscanf(yada,'additional file format lines=%g',1);
    
    for i=1:Nskip
        fgets(fid);
    end
%     fprintf(fid,'%%This file contains data for a Colima probability of hazard map generated by resampling a piecewise linear ensemble emulator constructed from titan simulations\n');
%     fprintf(fid,'%%crith [m]: the critical flow depth in meters, a .phm file contains the data needed to plot a map of P(h(east,north)>crith): [1] double\n');
%     fprintf(fid,'%%Ndiminmacro=4: number of uncertain dimensions (see what they are below) for each resample input: [1] integer\n');
%     fprintf(fid,'%%W: total so far weight of all resamples (macro emulator inputs) used to make this file:  [1] double\n');
%     fprintf(fid,'%%Nxmap: the number of (east,north) points on the map directly represented by this file: [1] integer\n');
%     fprintf(fid,'%%[Nxmap] lines containing {{x=(east,north):[2] doubles},{{WI WI^2}: these are the sum of all w*indicator_function and w*indicator_function^2, you compute the probability of exceeding the critical height as P(h(east,north)>crith)=WI/W: [2] doubles}}\n');
%     fprintf(fid,'%%Nresamp: number of resample inputs used so far to produce this .phm file: [1] integer\n');
%     fprintf(fid,'%%[Nresamp] lines containing the {{resample macro-inputs: (log10(volume [m^3]),Direction [deg CC from east],BedFrictAng [deg],IntFrictAng [deg]): [Ndiminmacro] doubles},{w: weight of this resample macro-input: [1] double}}\n');
     
    checkcrith=sscanf(fgets(fid),'%g',1); 
    checkNdiminmacro=sscanf(fgets(fid),'%g',1);
    temporaryW=sscanf(fgets(fid),'%g',1); 
    checkNxmap=sscanf(fgets(fid),'%g',1);

    if(crith~=checkcrith)
        save DEBUG_MERGE_PROBABILITY_OF_HAZARD_MAPS1;
        disp(sprintf('ERROR: crith from "%s" ~= crith from "%s"!!!! Workspace saved to DEBUG_MERGE_PROBABILITY_OF_HAZARD_MAPS1.\n',permanenthazmapfilename,temporaryhazmapfilename));
        bob; %cause the code to crash
    end
    if(Ndiminmacro~=checkNdiminmacro)
        save DEBUG_MERGE_PROBABILITY_OF_HAZARD_MAPS2;
        disp(sprintf('ERROR: Ndiminmacro from "%s" ~= Nidminmacro from "%s"!!!! Workspace saved to DEBUG_MERGE_PROBABILITY_OF_HAZARD_MAPS2.\n',permanenthazmapfilename,temporaryhazmapfilename));
        bob; %cause the code to crash
    end
    if(Nxmap~=checkNxmap)
        save DEBUG_MERGE_PROBABILITY_OF_HAZARD_MAPS3;
        disp(sprintf('ERROR: Nxmap from "%s" ~= Nxmap from "%s"!!!! Workspace saved to DEBUG_MERGE_PROBABILITY_OF_HAZARD_MAPS3.\n',permanenthazmapfilename,temporaryhazmapfilename));
        bob; %cause the code to crash
    end
    
    temporaryXMAPWIWI2=fscanf(fid,'%g %g %g\n',[4 Nxmap])';
    if(~all(all(XMAPWIWI2(:,1:2)==temporaryXMAPWIWI2(:,1:2))))
        save DEBUG_MERGE_PROBABILITY_OF_HAZARD_MAPS4;
        disp(sprintf('ERROR: The map-points from "%s" ~= the map-points from "%s" (it is possible they are only in the wrong order)!!!! Workspace saved to DEBUG_MERGE_PROBABILITY_OF_HAZARD_MAPS4.\n',permanenthazmapfilename,temporaryhazmapfilename));
        bob; %cause the code to crash
    end
        
    temporaryNresamp=sscanf(fgets(fid),'%g',1);
    
    temporaryXMACROw=fscanf(fid,sprintf('%%g%s\n',repmat(' %g',1,Ndiminmacro)),[Ndiminmacro+1 temporaryNresamp])';
    fclose(fid);   
    
    if(iftoc)
        disp(sprintf('Done reading "%s" at time t=%g [sec]',temporaryhazmapfilename,toc));
    end
              
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %merge the phms 

    if((~ifforce)&&(Nresamp>0))
        [isect,ialready,inew]=intersect(XMACROw(:,1:Ndiminmacro),temporaryXMACROw(:,1:Ndiminmacro),'rows');
        if(~isempty(isect))
            save DEBUG_MERGE_PROBABILITY_OF_HAZARD_MAPS5;
            disp(sprintf('ERROR: You have just attempted to aggregate in macro resample input coordinates that have already been included in "%s" and your request has not been performed!!!!  If you would like to "force" them to be included again, rerun with "-f" option.  Workspace saved to DEBUG_MERGE_PROBABILITY_OF_HAZARD_MAPS5. Now exiting with error code.\n',permanenthazmapfilename));
            errorcode=3;
            return;        
        end
    end
        
    W=W+temporaryW;
    XMAPWIWI2(:,3:4)=XMAPWIWI2(:,3:4)+temporaryXMAPWIWI2(:,3:4);    
    Nresamp=Nresamp+temporaryNresamp;
    XMACROw=[XMACROw; temporaryXMACROw];      
    
    if(iftoc)
        disp(sprintf('Done adding "%s" to "%s" at time t=%g [sec]',temporaryhazmapfilename,permanenthazmapfilename,toc));
    end

           
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
    %write the real data to the new .phm file
     
    fprintf(fidnewphm,'%.14g\n',crith,Ndiminmacro,W,Nxmap);
    fprintf(fidnewphm,'%.2f %.2f %.14g %.14g\n',XMAPWIWI2');
    fprintf(fidnewphm,'%g\n',Nresamp);
    fprintf(fidnewphm,sprintf('%%.10g%s\n',repmat(' %.10g',1,Ndiminmacro)),XMACROw');
    fclose(fidnewphm);
 
    [ss,ww]=unix(sprintf('mv -f %s %s',newpermanenthazmapfilename,permanenthazmapfilename));
    
    if(iftoc)
        disp(sprintf('Done updating the file "%s" at time t=%g [sec]',permanenthazmapfilename,toc));
    end
return;